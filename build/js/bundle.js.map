{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/app.js","src/js/slider.js","src/js/util.js","src/js/windowLoaded.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","//import {$} from \"../node_modules/jquery/dist/jquery\";\n//import _ from 'lodash';\n//import '../css/style.scss';\n//import Icon from './img1.png';\n//import { Shapes } from './app'\n//import \"babel-polyfill\";\nimport {$on} from './util';\nimport DocReady from './windowLoaded';\nimport Slider from './slider';\n\n//(function (document, window) {\n\n\n/*    if (/complete|loaded|interactive/.test(document.readyState) && document.body) {\n        startup();\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", startup, false);\n    }*/\n\n//(function ($) {  // start IIFE\n\nDocReady(() => {\n    console.log(\"DocReady\");\n\n    const app = new App();\n    const setView = () => {\n        app.startUp();\n    };\n\n    $on(window, 'load', setView);\n    $on(window, 'hashchange', setView);\n\n});\n\nclass App {\n    constructor() {\n\n    };\n\n\n    startUp() {\n\n        const sliderEl = document.querySelector('#slider1')\n\n        const slider = new Slider(sliderEl, {\n            slide: true,\n            callback: transitioned\n        });\n\n        return;\n\n        function transitioned (slide){\n            console.log('transitioned ', slide.children[0]);\n        }\n\n        //document.addEventListener('DOMContentLoaded', ready);\n\n\n        /*let opts = {\n            el: '#root',\n            btnGpEl: '#pg-control',\n            renderFn: f\n        }*/\n\n        // init\n        //var p = new Pager(opts)\n\n        // change page\n        //p.prev();\n        //p.next();\n\n        // update list\n        //p.setState({\n        //list: [...]\n        //});\n\n        // render function\n        /*function f(val, index, arr) {\n            const d = document.createElement('p');\n            d.innerText = val;\n            return d;\n        }*/\n\n\n        document.querySelector('.js-play').onclick = (e) => {\n            myTimeline.play()\n        };\n        document.querySelector(' .js-pause').onclick = (e) => {\n            myTimeline.pause()\n        };\n        document.querySelector('.js-restart').onclick = (e) => {\n            myTimeline.restart()\n        };\n\n        document.querySelector('.js-next').onclick = (e) => {\n            p.next();\n        };\n        document.querySelector('.js-back').onclick = (e) => {\n            p.prev();\n        };\n\n\n        var myTimeline = anime.timeline({\n            direction: 'reverse',\n            autoplay: false\n        });\n\n\n        const nodelist = document.querySelectorAll('[data-page=\"1\"] [data-step]');\n\n\n        const nodesArray = Array.prototype.slice.call(nodelist);\n\n        //const nodesArray = [...Array.from(document.querySelectorAll(\"[data-step]\"))];\n\n        function sorter(obj1, obj2) {\n            return obj1.dataset.step - obj2.dataset.step;\n        }\n\n        function renumber(obj, n) {\n            console.log('renumber ', obj, n);\n            obj.dataset.order = (n - parseInt(obj.dataset.step)).toString();\n        }\n\n\n        let tCols = 4, tRows = 6;\n        for (let i = 5; i >= 0; i--) {\n            console.log('nth ', (i * 4) + 1, (i * 4) + 4);\n\n            let start = (i * 4) + 1, end = (i * 4) + 4,\n                offset = (end === 24 && start === 21) ? '0' : '-=25';\n\n            Array.from(document.querySelectorAll(`[data-page=\"1\"] .cell:nth-child(n+${start}):nth-child(-n+${end})`)).forEach(function (el) {\n                myTimeline.add({\n                    targets: el,\n                    opacity: '0',\n                    translateX: '100',\n                    easing: 'easeInQuad',\n                    duration: 50,\n                    offset: offset\n                });\n            });\n        }\n\n\n        let myArr = Array.from(nodesArray).sort(sorter).reverse();\n        console.log('myArr ', typeof myArr);\n        console.log('myArr ', myArr);\n\n        //return;\n\n        Array.from(myArr)\n        //.sort(sorter)\n        //.reverse()\n            .forEach(function (el) {\n                //console.log(this.dataset.step);\n                //console.log(this);\n                //console.log(this.dataset);\n                let elTarget = `[data-step=\"${el.dataset.step}\"]`;\n\n                let elOffset = el.dataset.offset;\n                let elDuration = el.dataset.duration;\n\n                console.log('elDuration', elDuration);\n                let obj;\n\n                switch (el.dataset.type) {\n                    case 'fade':\n                        myTimeline.add({\n                            targets: elTarget,\n                            opacity: 0,\n                            easing: 'easeInQuad',\n                            duration: elDuration,\n                            offset: elOffset\n                            //direction: 'reverse'\n                        });\n                        break;\n                    case 'right-slide':\n                        myTimeline.add({\n                            targets: elTarget,\n                            opacity: '0',\n                            translateX: '150',\n                            easing: 'easeInQuad',\n                            duration: elDuration,\n                            offset: elOffset\n                        });\n                        break;\n                    case 'left-slide':\n                        myTimeline.add({\n                            targets: elTarget,\n                            opacity: '0',\n                            translateX: '-150',\n                            easing: 'easeInQuad',\n                            duration: elDuration,\n                            offset: elOffset\n                            //direction: 'reverse'\n                        });\n                        break;\n                    case 'left-roll':\n                        myTimeline.add({\n                            targets: elTarget,\n                            opacity: '0',\n                            //translateX: '20em',\n                            rotate: '-1turn',\n                            easing: 'easeInQuad',\n                            duration: elDuration,\n                            offset: elOffset,\n                            scale: 4,\n                            translateX: '350'\n                            /*rotate: {\n                                value: 25,\n                                duration: 2000,\n                                easing: 'easeInOutSine'\n                            }*/\n                            //direction: 'reverse'\n                        });\n                        break;\n                }\n            });\n\n\n        myTimeline.begin = function () {\n            console.log('#################### myTimeline ');\n\n            let wait = setTimeout(function () {\n                let wrapper = document.getElementsByClassName(\"wrapper\")[0];\n                wrapper.classList.remove('hidden');\n            }, 10);\n        };\n\n        myTimeline.complete = function () {\n            //let wrapper = document.getElementsByClassName(\"wrapper\")[0];\n            //wrapper.classList.remove('hidden');\n\n            (document.getElementsByClassName(\"wrapper\")[0]).classList.remove('hidden');\n\n            [].slice.call(document.getElementsByClassName('cell'))\n                .forEach(function (elem) {\n                    elem.classList.add('--bottom-border');\n                });\n\n        };\n\n        myTimeline.play();\n\n        //console.log('myTimeline ', myTimeline);\n\n    }\n}\n\n/*myTimeline\n    .add({\n        targets: '[data-step=\"1\"]',\n        translateX: 250,\n        direction: 'reverse'\n    })\n    .add({\n        targets: '[data-step=\"2\"]',\n        translateX: 250,\n        direction: 'reverse'\n    })\n    .add({\n        targets: '[data-step=\"3\"]',\n        translateX: 250,\n        direction: 'reverse'\n    });*/\n\n\n/*myTimeline.completed = false;\nmyTimeline.complete = () => {\n    // your call back funtion\n    console.log(\"reverse done 😏\");\n};\nmyTimeline.reverse();\nmyTimeline.play();*/\n\n/*var playPause = anime({\n    targets: '#playPause .el',\n    translateX: 250,\n    delay: function(el, i, l) { return i * 100; },\n    direction: 'alternate',\n    loop: true,\n    autoplay: false\n});\n\ndocument.querySelector('.navigation .play').onclick = playPause.play;\ndocument.querySelector('.navigation .pause').onclick = playPause.pause;*/\n\n\n/*var queue = [];\n\n$('[data-animation-step]').each(function (i, $el) {\n    queue.push($(this).fadeOut(5000));\n})*/\n\n\n/* var bouncingBall = anime({\n     targets: '.ball',\n     translateY: '50vh',\n     duration: 300,\n     loop: true,\n     direction: 'alternate',\n     easing: 'easeInCubic',\n     scaleX: {\n         value: 1.05,\n         duration: 150,\n         delay: 268\n     }\n });*/\n\n\n// Start Queue\n//$('#startQueue').bind('click', function (e) {\n// Go through Each Element and Fade Out //\n\n/*$('[data-animation-step]').each(function (i, $el) {\n    queue.push($(this).fadeOut(5000));\n\n})*/\n\n\n/*$('.queueItem').each(function (i, $el) {\n    // Don't Delay First Element//\n    if (i == 0) {\n        queue.push($(this).fadeOut(5000));\n    } else {\n        queue.push($(this).delay(5000 * i).fadeOut(5000));\n    }\n});*/\n//});\n\n\n// Create the array of Velocity calls\n/*var loadingSequence = [\n    { e: $element1, p: { translateX: 100, opacity: 1 }, o: { duration: 1000 } },\n    { e: $element2, p: { translateX: 200, opacity: 1 }, o: { duration: 1000 } },\n    { e: $element3, p: { translateX: 300, opacity: 1 }, o: { duration: 1000 } }\n];*/\n\n\n// Pass the array into $.Velocity.RunSequence to kick off the sequence\n//$.Velocity.RunSequence(loadingSequence);\n\n\n/*function component() {\n    var element = document.createElement('div');\n\n    console.log('element ', element)\n\n    // Lodash, currently included via a script, is required for this line to work\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n    element.classList.add('hello');\n\n    console.log('element ', element)\n    // Add the image to our existing div.\n    var myIcon = new Image();\n    myIcon.src = './img1.png';\n\n    element.appendChild(myIcon);\n\n    return element;\n}\n\n\n\n    }\n}\n\n\n*/\n\n//document.body.appendChild(component());\n\n\n//})(document, window);\n\n\n","export default class Slider {\n\n    static get DEFAULT() {\n        return {\n            interval: 0,\n            slide: false\n        }\n    }\n\n    static get DIRECTION() {\n        return {\n            PREV: 'prev',\n            NEXT: 'next',\n            LEFT: 'left',\n            RIGHT: 'right'\n        }\n    }\n\n    constructor(element, options) {\n\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        this.element = element;\n        this.options = Object.assign({}, Slider.DEFAULT, options);\n\n        this.listElement = this.element.querySelector('.slider-list');\n        this.items = this.listElement.children;\n        this.controls = this.element.querySelectorAll('.slider-control');\n        this.indicatorElement = this._createIndicator();\n        this.indicators = this.indicatorElement.children;\n\n        this._isSliding = false;\n        this._interval = null;\n\n        this._init();\n    }\n\n    static _getElementIndex(el) {\n        return Array.from(el.parentNode.children).indexOf(el);\n    }\n\n    _init() {\n        this._start();\n        this._bindEvents();\n\n        this.element.style.display = 'block';\n    }\n\n    _bindEvents() {\n        this.element.addEventListener('click', this._elementClickHandler.bind(this));\n        this.indicatorElement.addEventListener('click', this._indicatorClickHandler.bind(this));\n        document.addEventListener('visibilitychange', this._visibilityChangeHandler.bind(this));\n    }\n\n    _elementClickHandler(e) {\n        switch (true) {\n            case e.target.classList.contains('slider-control'):\n                this._controlClickHandler(e);\n                break;\n        }\n    }\n\n    _controlClickHandler(e) {\n        this._stop();\n        this._slide(e.target.dataset.direction);\n    }\n\n    _indicatorClickHandler(e) {\n\n        if (e.target.tagName !== 'SPAN') return;\n\n        const currentElementIndex = Slider._getElementIndex(this._getCurrentElement());\n        const indicatorIndex = Slider._getElementIndex(e.target);\n\n        let direction = currentElementIndex < indicatorIndex ? Slider.DIRECTION.NEXT : Slider.DIRECTION.PREV;\n\n        this._stop();\n        this._slide(direction, this.items.item(indicatorIndex));\n    }\n\n    _visibilityChangeHandler() {\n        document.visibilityState === 'hidden' ?\n            this._stop() :\n            this._start();\n    }\n\n    _setIndicator(index) {\n        this.indicatorElement.querySelector('.active').classList.remove('active');\n\n        this.indicators.item(index).classList.add('active');\n    }\n\n    _start() {\n\n        if (!this.options.slide || this._interval || this.options.slide === 0) return;\n\n        /*this._interval = setInterval(() => {\n            this._slide(Slider.DIRECTION.NEXT);\n        }, this.options.interval);*/\n    }\n\n\n    _stop() {\n        if (!this.options.slide) return;\n\n        clearInterval(this._interval);\n        this._interval = null;\n    }\n\n    _slide(direction, el = null) {\n\n        if (this._isSliding) return;\n\n        let currentElement = this._getCurrentElement(),\n            dir = null,\n            slideTo = null;\n\n        this._isSliding = true;\n\n        switch (direction) {\n            case Slider.DIRECTION.NEXT:\n                this.nextElement = el || currentElement.nextElementSibling || this.items.item(0);\n                dir = `slider-item-${Slider.DIRECTION.NEXT}`;\n                slideTo = `slide-${Slider.DIRECTION.LEFT}`;\n                break;\n            case Slider.DIRECTION.PREV:\n                this.nextElement = el || currentElement.previousElementSibling || this.items.item(this.items.length - 1);\n                dir = `slider-item-${Slider.DIRECTION.PREV}`;\n                slideTo = `slide-${Slider.DIRECTION.RIGHT}`;\n                break;\n        }\n\n        this._setIndicator(Slider._getElementIndex(this.nextElement));\n\n\n\n\n\n       /* function transitionComplete(e) {\n            console.log('transitionComplete ', e);\n            console.log('this ', this);\n\n            console.log('el ', e);\n            const el = e.target;\n            console.log('el ', el);\n\n\n            el.classList.remove(dir);\n            el.classList.remove(slideTo);\n            el.classList.remove('active');\n\n            this.nextElement.classList.remove(dir);\n            this.nextElement.classList.remove(slideTo);\n            this.nextElement.classList.add('active');\n\n            this._isSliding = false;\n\n            this.options.callback(this.nextElement);\n\n            this._start();\n\n\n\n        }*/\n\n        /*const func = function(event, t) {\n            console.log('t ', t)\n            transitionComplete( event );\n            currentElement.removeEventListener('transitionend', func);\n        };\n*/\n\n\n        //currentElement.addEventListener('transitionend', func, this);\n\n\n        currentElement.addEventListener('transitionend', function transitionHandler(e) {\n            const el = e.target;\n\n            el.removeEventListener(e.type, transitionHandler);\n\n            el.classList.remove(dir);\n            el.classList.remove(slideTo);\n            el.classList.remove('active');\n\n            this.nextElement.classList.remove(dir);\n            this.nextElement.classList.remove(slideTo);\n            this.nextElement.classList.add('active');\n\n            this._isSliding = false;\n\n            this._start();\n\n        }.bind(this))\n\n        this.nextElement.classList.add(dir);\n\n        setTimeout(() => {\n            currentElement.classList.add(slideTo);\n            this.nextElement.classList.add(slideTo);\n        }, 0);\n\n\n\n\n\n        /*console.log('currentElement ', currentElement)\n        currentElement.addEventListener('transitionend', function transitionHandler(e) {\n\n\n            const el = e.target;\n            console.log('el ', el);\n\n            el.removeEventListener(e.type, transitionHandler);\n\n            el.classList.remove(dir);\n            el.classList.remove(slideTo);\n            el.classList.remove('active');\n\n            this.nextElement.classList.remove(dir);\n            this.nextElement.classList.remove(slideTo);\n            this.nextElement.classList.add('active');\n\n            this._isSliding = false;\n\n            this.options.callback(this.nextElement);\n\n            this._start();\n\n        }, true);*/\n\n\n\n\n\n        /*this.nextElement.classList.add(dir);\n\n        setTimeout(() => {\n            currentElement.classList.add(slideTo);\n            this.nextElement.classList.add(slideTo);\n        }, 0).bind(this)*/\n\n\n\n    }\n\n    _getCurrentElement() {\n        return this.listElement.querySelector('.active');\n    }\n\n    _createIndicator() {\n        let indicators = Array.from(this.items).reduce(function (indicators, item, index) {\n            return indicators += `<span data-id=\"${index}\" class=\"${(!index && 'active') || ''}\"></span>`\n        }, '');\n\n        this.element.insertAdjacentHTML('afterbegin', `<div class=\"slider-indicators\">${indicators}</div>`);\n\n        return this.element.querySelector('.slider-indicators');\n    }\n\n    /** Public Methods */\n\n    next() {\n        this._slide(Slider.DIRECTION.NEXT)\n    }\n\n    prev() {\n        this._slide(Slider.DIRECTION.PREV)\n    }\n}","// util.js\n\nconst $on = (target, event, handler) => {\n  return target.addEventListener(event, handler);\n};\n\nexport { $on };","export default function docReady(callback) {\n\n    function completed() {\n        document.removeEventListener( \"DOMContentLoaded\", completed, false );\n        window.removeEventListener( \"load\", completed, false );\n        callback()\n    }\n\n    //Events.on(document, 'DOMContentLoaded', completed)\n\n    if ( document.readyState === \"complete\" ) {\n        // Handle it asynchronously to allow scripts the opportunity to delay ready\n        setTimeout( callback )\n\n    } else {\n\n        // Use the handy event callback\n        document.addEventListener( \"DOMContentLoaded\", completed, false );\n\n        // A fallback to window.onload, that will always work\n        window.addEventListener( \"load\", completed, false );\n    }\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}